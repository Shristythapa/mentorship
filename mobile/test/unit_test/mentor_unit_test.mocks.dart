// Mocks generated by Mockito 5.4.4 from annotations
// in app/test/unit_test/mentor_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:app/core/error/failure.dart' as _i6;
import 'package:app/features/mentorSearch/domain/entity/mentor_search_entity.dart'
    as _i7;
import 'package:app/features/mentorSearch/domain/repository/mentor_search_repository.dart'
    as _i2;
import 'package:app/features/mentorSearch/domain/usecases/get_all_mentor_use_case.dart'
    as _i8;
import 'package:app/features/mentorSearch/domain/usecases/get_mentor_by_id_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIMentorSearchRepository_0 extends _i1.SmartFake
    implements _i2.IMentorSearchRepository {
  _FakeIMentorSearchRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetMentorByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMentorByIdUsecase extends _i1.Mock
    implements _i4.GetMentorByIdUsecase {
  @override
  _i2.IMentorSearchRepository get mentorSearchRepository => (super.noSuchMethod(
        Invocation.getter(#mentorSearchRepository),
        returnValue: _FakeIMentorSearchRepository_0(
          this,
          Invocation.getter(#mentorSearchRepository),
        ),
        returnValueForMissingStub: _FakeIMentorSearchRepository_0(
          this,
          Invocation.getter(#mentorSearchRepository),
        ),
      ) as _i2.IMentorSearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.MentorSearchEntity>> getMentorById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMentorById,
          [id],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MentorSearchEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.MentorSearchEntity>(
          this,
          Invocation.method(
            #getMentorById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MentorSearchEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.MentorSearchEntity>(
          this,
          Invocation.method(
            #getMentorById,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.MentorSearchEntity>>);
}

/// A class which mocks [GetAllMentorsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllMentorsUseCase extends _i1.Mock
    implements _i8.GetAllMentorsUseCase {
  @override
  _i2.IMentorSearchRepository get mentorSearchRepository => (super.noSuchMethod(
        Invocation.getter(#mentorSearchRepository),
        returnValue: _FakeIMentorSearchRepository_0(
          this,
          Invocation.getter(#mentorSearchRepository),
        ),
        returnValueForMissingStub: _FakeIMentorSearchRepository_0(
          this,
          Invocation.getter(#mentorSearchRepository),
        ),
      ) as _i2.IMentorSearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.MentorSearchEntity>>>
      getAllMentors() => (super.noSuchMethod(
            Invocation.method(
              #getAllMentors,
              [],
            ),
            returnValue: _i5.Future<
                    _i3
                    .Either<_i6.Failure, List<_i7.MentorSearchEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.MentorSearchEntity>>(
              this,
              Invocation.method(
                #getAllMentors,
                [],
              ),
            )),
            returnValueForMissingStub: _i5.Future<
                    _i3
                    .Either<_i6.Failure, List<_i7.MentorSearchEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.MentorSearchEntity>>(
              this,
              Invocation.method(
                #getAllMentors,
                [],
              ),
            )),
          ) as _i5
              .Future<_i3.Either<_i6.Failure, List<_i7.MentorSearchEntity>>>);
}
