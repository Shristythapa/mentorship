// Mocks generated by Mockito 5.4.4 from annotations
// in app/test/unit_test/mentor_session_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:app/core/error/failure.dart' as _i8;
import 'package:app/core/shared_pref/user_shared_prefs.dart' as _i13;
import 'package:app/features/sessions/domain/entity/session_entity.dart' as _i9;
import 'package:app/features/sessions/domain/repository/session_repository.dart'
    as _i2;
import 'package:app/features/sessions/domain/usecases/add_session_usecase.dart'
    as _i6;
import 'package:app/features/sessions/domain/usecases/delete_session_usecase.dart'
    as _i10;
import 'package:app/features/sessions/domain/usecases/get_session_by_id_usecase.dart'
    as _i11;
import 'package:app/features/sessions/domain/usecases/get_session_by_mentor_id_usecase.dart'
    as _i12;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/notification_listener.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeISessionRepository_0 extends _i1.SmartFake
    implements _i2.ISessionRepository {
  _FakeISessionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i5.DiagnosticsNode {
  _FakeDiagnosticsNode_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [AddSessionUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddSessionUsecase extends _i1.Mock implements _i6.AddSessionUsecase {
  @override
  _i2.ISessionRepository get sessionRepository => (super.noSuchMethod(
        Invocation.getter(#sessionRepository),
        returnValue: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
        returnValueForMissingStub: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
      ) as _i2.ISessionRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> addSession(
          _i9.SessionEntity? sessionEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSession,
          [sessionEntity],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #addSession,
            [sessionEntity],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #addSession,
            [sessionEntity],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [DeleteSessionUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteSessionUsecase extends _i1.Mock
    implements _i10.DeleteSessionUsecase {
  @override
  _i2.ISessionRepository get sessionRepository => (super.noSuchMethod(
        Invocation.getter(#sessionRepository),
        returnValue: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
        returnValueForMissingStub: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
      ) as _i2.ISessionRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> deleteSession(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [id],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteSession,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteSession,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [GetSessionByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSessionByIdUsecase extends _i1.Mock
    implements _i11.GetSessionByIdUsecase {
  @override
  _i2.ISessionRepository get sessionRepository => (super.noSuchMethod(
        Invocation.getter(#sessionRepository),
        returnValue: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
        returnValueForMissingStub: _FakeISessionRepository_0(
          this,
          Invocation.getter(#sessionRepository),
        ),
      ) as _i2.ISessionRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.SessionEntity>> getSessionById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionById,
          [id],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i9.SessionEntity>>.value(
                _FakeEither_1<_i8.Failure, _i9.SessionEntity>(
          this,
          Invocation.method(
            #getSessionById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, _i9.SessionEntity>>.value(
                _FakeEither_1<_i8.Failure, _i9.SessionEntity>(
          this,
          Invocation.method(
            #getSessionById,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.SessionEntity>>);
}

/// A class which mocks [GetSessionByMentorIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSessionByMentorIdUsecase extends _i1.Mock
    implements _i12.GetSessionByMentorIdUsecase {
  @override
  _i2.ISessionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeISessionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeISessionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ISessionRepository);

  @override
  _i7.Future<
      _i3.Either<_i8.Failure, List<_i9.SessionEntity>>> getSessionByMentorId(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionByMentorId,
          [id],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i9.SessionEntity>>>.value(
                _FakeEither_1<_i8.Failure, List<_i9.SessionEntity>>(
          this,
          Invocation.method(
            #getSessionByMentorId,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, List<_i9.SessionEntity>>>.value(
                _FakeEither_1<_i8.Failure, List<_i9.SessionEntity>>(
          this,
          Invocation.method(
            #getSessionByMentorId,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i9.SessionEntity>>>);
}

/// A class which mocks [UserSharedPrefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSharedPrefs extends _i1.Mock implements _i13.UserSharedPrefs {
  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> setUserToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserToken,
          [token],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #setUserToken,
            [token],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #setUserToken,
            [token],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, String?>> getUserToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserToken,
          [],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, String?>>.value(
            _FakeEither_1<_i8.Failure, String?>(
          this,
          Invocation.method(
            #getUserToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, String?>>.value(
                _FakeEither_1<_i8.Failure, String?>(
          this,
          Invocation.method(
            #getUserToken,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, String?>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> deleteUserToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserToken,
          [],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserToken,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> setUserDetails(
          Map<String, dynamic>? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserDetails,
          [userData],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #setUserDetails,
            [userData],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #setUserDetails,
            [userData],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, Map<String, dynamic>>> getUserDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDetails,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, Map<String, dynamic>>>.value(
                _FakeEither_1<_i8.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #getUserDetails,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, Map<String, dynamic>>>.value(
                _FakeEither_1<_i8.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #getUserDetails,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, Map<String, dynamic>>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> deleteUserDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserDetails,
          [],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserDetails,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserDetails,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);

  @override
  void visitAncestorElements(_i4.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i14.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DiagnosticsNode describeElement(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i5.DiagnosticsNode);

  @override
  _i5.DiagnosticsNode describeWidget(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i5.DiagnosticsNode);

  @override
  List<_i5.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i5.DiagnosticsNode>[],
        returnValueForMissingStub: <_i5.DiagnosticsNode>[],
      ) as List<_i5.DiagnosticsNode>);

  @override
  _i5.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i5.DiagnosticsNode);
}
